{"ast":null,"code":"var _jsxFileName = \"/Users/lambda_school_loaner_277/Desktop/coding/DevDesk-Front-End/dev/src/components/student/Student.js\";\nimport React, { useState, useEffect, useContext } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport ProjectCard from \"../Projects/ProjectCard\";\nimport { ProjectsContext } from \"../../contexts/AppContext\";\nimport { axiosWithAuth } from \"../../utils/axiosWithAuth\";\nimport jwt from \"jsonwebtoken\"; //Needed to capture Username\n\nconst postNewStudent = (newProject, refreshProjectList) => {\n  axiosWithAuth().post(\"/api/tickets\", newProject).then(res => {\n    console.log(res.data);\n    refreshProjectList();\n  }).catch(err => {\n    console.log(err, \"Failed to post new student\");\n  });\n};\n\nconst Projects = () => {\n  const token = JSON.parse(localStorage.getItem(\"token\"));\n  const secret = \"keepitsecret,keepitsafe!\";\n  let user;\n  jwt.verify(token, secret, (error, decodedToken) => {\n    user = decodedToken;\n  });\n  const [projects, setProjects] = useContext(ProjectsContext); // const projects = useState(AppContext);\n  // const setProjects = useContext(AppContext);\n\n  const refreshProjectList = () => {\n    axiosWithAuth().get(\"\").then(res => {\n      console.log(res);\n      setProjects(res.data);\n    }).catch(error => {\n      console.log(error);\n    });\n  };\n\n  useEffect(() => {\n    refreshProjectList();\n  }, []);\n\n  const submitProjects = data => {\n    console.log(data);\n    postNewProject({\n      my_username: user.username,\n      projectName: data.projectName,\n      projectType: data.projectType\n    }, refreshProjectList);\n  }; //For the forms\n\n\n  const {\n    register,\n    handleSubmit,\n    errors\n  } = useForm();\n  console.log(errors);\n  return /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: handleSubmit(onSubmit),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    placeholder: \"Title\",\n    name: \"Title\",\n    ref: register({\n      required: true,\n      min: 2,\n      maxLength: 80\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"textarea\", {\n    name: \"Description\",\n    placeholder: \"Description\",\n    ref: register({\n      required: true,\n      max: 2,\n      maxLength: 300\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    placeholder: \"Tried\",\n    name: \"Tried\",\n    ref: register({\n      required: true,\n      min: 2,\n      maxLength: 128,\n      pattern: /^\\S+@\\S+$/i\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    placeholder: \"Category\",\n    name: \"Category\",\n    ref: register({\n      required: true,\n      min: 2,\n      maxLength: 128\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }\n  }));\n};","map":{"version":3,"sources":["/Users/lambda_school_loaner_277/Desktop/coding/DevDesk-Front-End/dev/src/components/student/Student.js"],"names":["React","useState","useEffect","useContext","useForm","ProjectCard","ProjectsContext","axiosWithAuth","jwt","postNewStudent","newProject","refreshProjectList","post","then","res","console","log","data","catch","err","Projects","token","JSON","parse","localStorage","getItem","secret","user","verify","error","decodedToken","projects","setProjects","get","submitProjects","postNewProject","my_username","username","projectName","projectType","register","handleSubmit","errors","onSubmit","required","min","maxLength","max","pattern"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useContext } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport ProjectCard from \"../Projects/ProjectCard\";\nimport { ProjectsContext } from \"../../contexts/AppContext\";\nimport { axiosWithAuth } from \"../../utils/axiosWithAuth\";\nimport jwt from \"jsonwebtoken\"; //Needed to capture Username\n\nconst postNewStudent = (newProject, refreshProjectList) => {\n  axiosWithAuth()\n    .post(\"/api/tickets\", newProject)\n    .then((res) => {\n      console.log(res.data);\n      refreshProjectList();\n    })\n    .catch((err) => {\n      console.log(err, \"Failed to post new student\");\n    });\n};\n\nconst Projects = () => {\n  const token = JSON.parse(localStorage.getItem(\"token\"));\n  const secret = \"keepitsecret,keepitsafe!\";\n  let user;\n  jwt.verify(token, secret, (error, decodedToken) => {\n    user = decodedToken;\n  });\n  const [projects, setProjects] = useContext(ProjectsContext);\n  // const projects = useState(AppContext);\n  // const setProjects = useContext(AppContext);\n\n  const refreshProjectList = () => {\n    axiosWithAuth()\n      .get(\"\")\n      .then((res) => {\n        console.log(res);\n        setProjects(res.data);\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  };\n\n  useEffect(() => {\n    refreshProjectList();\n  }, []);\n\n  const submitProjects = (data) => {\n    console.log(data);\n    postNewProject(\n      {\n        my_username: user.username,\n        projectName: data.projectName,\n        projectType: data.projectType,\n      },\n      refreshProjectList\n    );\n  };\n  //For the forms\n  const { register, handleSubmit, errors } = useForm();\n  console.log(errors);\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <input\n        type=\"text\"\n        placeholder=\"Title\"\n        name=\"Title\"\n        ref={register({ required: true, min: 2, maxLength: 80 })}\n      />\n      <textarea\n        name=\"Description\"\n        placeholder=\"Description\"\n        ref={register({ required: true, max: 2, maxLength: 300 })}\n      />\n      <input\n        type=\"text\"\n        placeholder=\"Tried\"\n        name=\"Tried\"\n        ref={register({\n          required: true,\n          min: 2,\n          maxLength: 128,\n          pattern: /^\\S+@\\S+$/i,\n        })}\n      />\n      <input\n        type=\"text\"\n        placeholder=\"Category\"\n        name=\"Category\"\n        ref={register({ required: true, min: 2, maxLength: 128 })}\n      />\n\n      <input type=\"submit\" />\n    </form>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}